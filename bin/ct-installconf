#!/usr/bin/env python
#vim: sw=2
##
## ct-install.py
## Login : <ctaf@ctaf-maptop>
## Started on  Sun Jan 17 12:57:42 2010 Cedric GESTES
## $Id$
##
## Author(s):
##  - Cedric GESTES <ctaf42@gmail.com>
##
## Copyright (C) 2010, 2012 Cedric GESTES
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
##

import logging
import sys
import os
import shutil
#import difflib
import filecmp


logging.basicConfig(level=logging.WARNING)
LOGGER = logging.getLogger('')

DRY_RUN  = False
DEST_DIR = os.path.realpath(os.path.expanduser("~"))
SRC_DIR  = os.path.realpath(os.path.join(os.path.dirname(os.path.abspath(__file__)), ".."))

def get_backup_filename(fname):
  """ return a filename.<id>
  id is incremented as needed

  WARNING this function could return an invalid filename
  if an the input filepath is not correct
  """

  bid = 0
  while True:
    backup = "%s.%d" % (fname, bid)
    bid = bid + 1
    if not os.path.exists(backup):
      return backup

def grk_copy_file(dest, src):
  LOGGER.debug("cp %s %s", src, dest)
  if not DRY_RUN:
    shutil.copyfile(dest, src)
  else:
    LOGGER.debug("dryrun: cp %s %s", src, dest)
  pass

def grk_rm_file(dest):
  LOGGER.debug("rm %s", dest)
  if not DRY_RUN:
    os.remove(dest)
  else:
    LOGGER.debug("dryrun: rm %s %s", dest)
  pass


def grk_backup_file(fname, src = None):
  """
  if src is specified and fname and src are identical do nothing

  if <fname>.original exists:
    copy fname to fname.backup.(date)
  else
    copy fname to fname.original (if fname.original does not exist)
  """
  LOGGER.debug("grk_backup_file(%s, %s)" % (fname, src))

  original = fname + ".original"

  if not os.path.exists(fname):
    LOGGER.warning("grk_backup_file: %s doest not exits", fname)
    return

  #first installation, create .original
  if not os.path.exists(original):
    LOGGER.info("copy %s to %s", fname, original)
    grk_copy_file(fname, original)
    return

  #backup as fname.date
  backup = get_backup_filename(fname)
  LOGGER.info("backup: %s to %s", fname, backup)
  grk_copy_file(fname, backup)
  pass

def grk_install_file_once(fname_dest, fname_src):
  LOGGER.debug("grk_install_file_once(%s)", fname_dest)
  src  = os.path.join(SRC_DIR, "etc", "users", fname_src)
  dest = os.path.join(DEST_DIR, fname_dest)
  LOGGER.debug("grk_install_file_once(%s, %s)", src, dest)
  if not os.path.exists(dest):
    LOGGER.debug("install custom file: %s", dest)
    print("creating :", dest)
    grk_copy_file(src, dest)
  else:
    LOGGER.debug("file already exists: %s", dest)

def grk_remove_file(dest):
  dest_abs = os.path.abspath(os.path.join(DEST_DIR, dest))
  if (os.path.exists(dest_abs)):
    LOGGER.info("the configuration file : %s exits, creating a backup", dest_abs)
    print("removing :", dest)
    grk_backup_file(dest_abs)
    grk_rm_file(dest_abs)

def grk_install_file(dest, src):
  """
  - check if file exists
  - backup dest (with grk_backup_file)
  """
  LOGGER.debug("grk_install_file(%s, %s)" % (str(dest), str(src)))

  dest_abs = os.path.abspath(os.path.join(DEST_DIR, dest))
  #LOGGER.debug("dest abs: %s" % (dest_abs))

  src_abs = os.path.abspath(os.path.join(SRC_DIR, src))
  #LOGGER.debug("src abs: %s" % (src_abs))

  #check if fname and src are identical
  try:
    if filecmp.cmp(src_abs, dest_abs):
      LOGGER.info("identical: %s %s", src_abs, dest_abs)
      return
  except OSError as e:
    if e.errno != 2:
      raise

    #TODO
    #f = open(src, "r")
    #src_content = f.readlines()
    #f.close()
    #f = open(fname, "r")
    #dest_content = f.readlines()
    #f.close()

    #d = difflib.Differ()
    #ret = d.compare(src_content, dest_content)
    #if ret:
    #  print ret
    #  return

  if (os.path.exists(dest_abs)):
    #LOGGER.info("the configuration file : %s exits, creating a backup", dest_abs)
    grk_backup_file(dest_abs, src_abs)

  print("installing: %s" % dest)
  grk_copy_file(src_abs, dest_abs)
  pass

def grk_uninstall_file(dest):
  LOGGER.debug("grk_uninstall_file", dest)
  pass


def grk_install(grksetup):
  """
  - install a grksetup file
  """
  print(grksetup.__name__)
  if getattr(grksetup, 'FILES', None):
    for grk in grksetup.FILES:
      grk_install_file(grk[0], grk[1])

  if getattr(grksetup, 'REMOVE_FILES', None):
    for grk in grksetup.REMOVE_FILES:
      grk_remove_file(grk)

  if getattr(grksetup, 'USERS', None):
    for user in grksetup.USERS:
      grk_install_file_once(user[0], user[1])

  inst_fct = getattr(grksetup, 'install', None)
  if inst_fct and callable(inst_fct):
    grksetup().install()


def write_git_sha1():
  """ get the current git sha1
      write it to ~/.config/ctafconf/.installed
  """
  try:
    head = open(os.path.join(SRC_DIR, ".git", "HEAD")).readlines()[0].strip()
  except:
    LOGGER.warning("Can't open .git/HEAD")
    return
  rev = None
  if head.startswith("ref:"):
    try:
      rev = open(os.path.join(SRC_DIR, ".git", head[5:])).readlines()[0].strip()
    except:
      LOGGER.warning("Can't open .git/<rev>")
      return
  else:
    rev = head
  LOGGER.debug("Head sha1 is %s", rev)
  f = open(os.path.expanduser("~/.config/ctafconf/.installed"), "w+")
  f.write("%s\n" % (rev))
  f.close()

def write_default_profile():
  """
  write a default configuration file to ~/.config/ctafconf/user-profile.sh if the file does not exists
  """
  src_abs  = SRC_DIR  + "/etc/users/user-profile.sh"
  dest_abs = DEST_DIR + "/.config/ctafconf/user-profile.sh"
  if not os.path.exists(dest_abs):
    grk_copy_file(src_abs, dest_abs)
    print("to complete the installation edit ~/.config/ctafconf/user-profile.sh")
  pass

class GrkSetup:
  """
  contains a list of file to install
  """
  pass

class GrkSetupZsh:
  FILES         = [ ( ".zshrc"       , "etc/zsh/zshrc") ]
  USERS         = [ ( ".zshrc.user"  , "sh.user") ]
  REMOVE_FILES  = [ ".zshenv", ]

class GrkSetupBash:
  FILES = [ ( ".bashrc"      , "etc/bash/bashrc") ]
  USERS = [ ( ".bashrc.user" , "sh.user"), ]

class GrkSetupTop:
  FILES = [ (".toprc"        , "etc/top/toprc") ]

class GrkSetupEmacs:
  FILES = [ (".emacs"        , "etc/emacs/emacs") ]
  USERS = [ (".emacs.pre.el" , "emacs.user.el"),
            (".emacs.post.el", "emacs.user.el") ]

class GrkSetupVim:
  FILES = [ (".vimrc"        ,    "etc/vim/vimrc"),
            (".gvimrc"       ,   "etc/vim/gvimrc") ]
  USERS         = [ ( ".vimrc.user"  , "vimrc.user") ]
  def install(self):
    """Make a symlink ~/.vim -> .config/etc/vim """
    src  = os.path.join(SRC_DIR,  "etc/vim")
    dest = os.path.join(DEST_DIR, ".vim")
    # Back up ~/.vim if neccessary
    identical = True
    try:
      identical = os.path.samefile(src, dest)
    except OSError:
      pass
    if not identical:
      dest_orig = dest + ".orig"
      try:
        os.rename(dest, dest_orig)
      except OSError as e:
        print("Could not backup", dest, "->", dest_orig)
        print("Error was:", e)
    try:
      os.symlink(src, dest)
    except OSError as e:
      #symlink exists... ok we dont care
      if e.errno != 17:
        raise

PACKAGES = [ GrkSetupZsh,
             GrkSetupBash,
             GrkSetupTop,
             GrkSetupEmacs,
             GrkSetupVim ]

def prepare_tree():
  """ create symlink for etc and bin if necessary,
  this avoid forcing source to be in .config/ctafconf
  """

  current_folder = os.path.normpath(os.path.join(os.path.realpath(os.path.dirname(__file__)), ".."))
  dest_folder = os.path.realpath(os.path.join(DEST_DIR, ".config", "ctafconf"))

  try:
    if os.path.samefile(dest_folder, current_folder):
      print("inplace installation")
      return
  except OSError:
    pass


  def symlink_folder(name):
    dest_sym = os.path.join(dest_folder, name)
    if not os.path.exists(dest_folder):
      os.makedirs(dest_folder)
    if not os.path.exists(dest_sym):
      print("new symlink: ~/.config/ctafconf/" + name)
      #remove broken symlink (exists return true for broken symlink)
      if os.path.islink(dest_sym):
        os.remove(dest_sym)
      os.symlink(os.path.join(current_folder, name), os.path.join(dest_folder, name))

  print("install from", current_folder)
  symlink_folder("etc")
  symlink_folder("bin")
  symlink_folder("profile")

if __name__ == "__main__":
  if "--without-vim" in sys.argv:
    PACKAGES.remove(GrkSetupVim)
  if "--dry-run" in sys.argv:
    DRY_RUN = True
  if "--verbose" in sys.argv or "-v" in sys.argv:
    LOGGER.setLevel(logging.DEBUG)
  prepare_tree()
  for grk in PACKAGES:
    grk_install(grk)
  write_git_sha1()
  write_default_profile()


# vim: sw=2 et ft=python
